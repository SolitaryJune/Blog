---
layout:     post
title:      "RVO算法详解"
subtitle:   "RVO2,OV"
date:       2021-04-19
author:     "elmagnifico"
header-img: "img/zerotier.jpg"
catalog:    true
tags:
    - pathfinding
---

## Foreword

RVO已经实际应用了，但是基于RVO的论理，还是做了进一步修改，将RVO和实际应用结合的更紧密一些。

或者说实际上模拟了一个小型物理系统，来追踪和获取路径点信息。



## 先说一下实际应用的坑

1.RVO 3D 这里官方给的例子是VS，直接可以上手运行，而git上的例子不是基于vs的，不是很好编译

> https://gamma.cs.unc.edu/RVO2/
>
> https://github.com/snape/RVO2



2.RVO 3D缺少了一些关键参数，比如加速度，实际控制中没有加速度控制，可能和实际应用多有不同，而2D版本则是都有的。有尝试过使用别人增加加速度控制的，但是实际上效果不好，可能需要重新实现一下。



3.RVO 3D中速度的限制或者物理量的单位不明确，特别是速度和TimeStep，当时间精度和速度都设置为真实物理量的时候，会发现速度往往是设置值的10倍，而有时候又是正常的，这个可能是实现的内部有bug，导致这个物理量成了一个相对值，而不是绝对值，不能真的当作物理量对待。这就导致获取到了RVO的路径点以后，还需要将这一段路径点重新转化成你的物理环境下的变量，而不能直接拿来用。



4.TimeHorizon，这个东西会严重影响智能体是否能达到最高速度，严重影响最终能否获取到结果，但是实际意义又不明确，导致用起来很难。



5.RVO 3D 中没有实现障碍物的处理，2D中则是给了一些障碍物模型。需要添加障碍物，要重写。



6.RVO中的算法是相同的，智能体之间不需要交流，这个不能算缺点，不需要交流的好处是，他们可以应用到分布式中，只要他们能拿到相同的信息即可得到相同的结果，从而可以在分布式的环境下独立运行，而不出现干扰。同理这样的情况下会导致可能某些情况下效率不高，需要更高一层的算法帮忙做好局部目标来缓解局部低效的情况（比如很窄的通道，两边都挤满人的情况下，RVO这个时候局部避障可能大概率走不出来）



## 优点

1. 简单，计算量不大。
2. 实时可控，解算速率比较快，中途可以加入新节点也可以移除老节点。
3. 开源，可以根据基础算法二次扩展，适配实际的应用环境。
4. 解耦路径规划，本身只处理局部碰撞即可，全局的路径对他来说并不知道。



## 框架

- 全局寻路算法，给出中间的路径点（roadmap或者a*之类的）

  - 路径点作为输入，给到RVO，作为局部目标点，到达局部目标点后，继续朝下一个局部目标点行进，直到最终目标点
- 转换并且平滑RVO路径点，将其合理化到对应的物理世界中
- 输出路径点，开始执行



## RVO理论基础







## Summary



## Quote

> https://gamma.cs.unc.edu/RVO/
>
> https://gamma.cs.unc.edu/ORCA/
>
> https://gamma.cs.unc.edu/RVO2/
>
> Reciprocal Velocity Obstacles for Real-Time Multi-Agent Navigation

